// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MEMBER
  TRAINER
  MANAGER
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model User {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  username                 String
  email                    String                    @unique
  naverId                  String?                   @unique
  kakaoId                  String?                   @unique
  mobile                   String                    @unique
  avatarMediaId            String?                   @unique @db.Uuid
  avatarMedia              Media?                    @relation("UserAvatar", fields: [avatarMediaId], references: [id], onDelete: SetNull)
  usernameChangeCount      Int                       @default(0) // 변경 횟수
  lastUsernameChangeAt     DateTime? // 마지막 변경 시간
  role                     UserRole                  @default(MEMBER)
  trainerProfile           Trainer?
  managerProfile           Manager?
  memberProfile            Member?
  userData                 UserData?
  deletedAt                DateTime?
  rateLimit                RateLimit[]
  chatRoomParticipants     ChatRoomParticipant[]
  sentMessages             Message[]
  requestedScheduleChanges PtScheduleChangeRequest[] @relation("ScheduleChangeRequestor")
  respondedScheduleChanges PtScheduleChangeRequest[] @relation("ScheduleChangeResponder")

  // 업로드한 모든 미디어 (다대일 관계)
  uploadedMedia Media[] @relation("UploadedMedia")

  // 미디어 사용량
  mediaUsage MediaUsage[]

  // 구독 정보
  isPremiumUser      Boolean       @default(false)
  subscriptionExpiry DateTime?
  MessageRead        MessageRead[]
}

model UserData {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId     String       @unique @db.Uuid
  logNicePay LogNicePay[]
}

model Member {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @db.Uuid
  pt               Pt[]
  membership       Membership[]
  ptCoupon         PtCoupon[]
  membershipCoupon MembershipCoupon[]
  fitnessCenter    FitnessCenter?     @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId  String?            @db.Uuid
  active           Boolean            @default(true)
}

model Trainer {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @db.Uuid
  introduce        String             @default("안녕하세요")
  group            Group?             @relation(fields: [groupId], references: [id])
  groupId          String?            @db.Uuid
  pt               Pt[]
  ptProduct        PtProduct[]
  ptCoupon         PtCoupon[]
  membershipCoupon MembershipCoupon[]
  fitnessCenter    FitnessCenter?     @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId  String?            @db.Uuid
  trainerOff       TrainerOff[]
  working          Boolean            @default(true)
}

model Manager {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique @db.Uuid
  group              Group[]
  ptCoupon           PtCoupon[]
  membershipCoupon   MembershipCoupon[]
  membershipAddedDay MembershipAddedDay[]
  fitnessCenter      FitnessCenter?       @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId    String?              @db.Uuid
}

model Group {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  manager   Manager   @relation(fields: [managerId], references: [id])
  managerId String    @db.Uuid
  trainers  Trainer[]
}

model ConfigurationValue {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  title     String
  text      String
  option    String
  etc       String
}

model PtProduct {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  price       Int
  description String
  totalCount  Int
  time        Int       @default(60) // minute
  onSale      Boolean   @default(true)
  trainer     Trainer[]
  openedAt    DateTime  @default(now())
  closedAt    DateTime  @default(dbgenerated("TIMESTAMP '2199-12-31 23:59:59'"))
  pt          Pt[]
}

enum PtState {
  PENDING
  CONFIRMED
  REJECTED
}

model Pt {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  ptProduct        PtProduct  @relation(fields: [ptProductId], references: [id])
  ptProductId      String     @db.Uuid
  member           Member?    @relation(fields: [memberId], references: [id])
  memberId         String?    @db.Uuid
  trainer          Trainer?   @relation(fields: [trainerId], references: [id])
  trainerId        String?    @db.Uuid
  state            PtState    @default(PENDING)
  trainerConfirmed Boolean    @default(false)
  description      String     @default("")
  ptRecord         PtRecord[]
  ptCoupon         PtCoupon?
  ptPayment        PtPayment?
  startDate        DateTime
  isRegular        Boolean
  weekTimes        WeekTime[]
}

enum ScheduleChangeState {
  PENDING // 변경 요청 대기
  APPROVED // 승인됨
  REJECTED // 거절됨
  EXPIRED // 만료됨
  CANCELLED // 요청자가 취소
}

model PtScheduleChangeRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // PtRecord와 관계 (핵심!)
  ptRecord   PtRecord @relation(fields: [ptRecordId], references: [id])
  ptRecordId String   @db.Uuid

  // 요청자 정보 (relation name 추가)
  requestor   User   @relation("ScheduleChangeRequestor", fields: [requestorId], references: [id])
  requestorId String @db.Uuid

  // 요청된 새로운 일정 정보
  requestedDate      DateTime
  requestedStartTime Int
  requestedEndTime   Int
  // 원래의 일정
  originalDate       DateTime
  originalStartTime  Int
  originalEndTime    Int

  // 상태 및 메타데이터
  state  ScheduleChangeState @default(PENDING)
  reason String // 변경 사유

  // 응답 정보 (relation name 추가)
  responder       User?     @relation("ScheduleChangeResponder", fields: [responderId], references: [id])
  responderId     String?   @db.Uuid
  responseMessage String? // 승인/거절 사유
  respondedAt     DateTime?

  // 만료 시간
  expiresAt DateTime

  @@index([ptRecordId])
  @@index([state])
  @@index([expiresAt])
}

model PtRecord {
  id                    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  pt                    Pt                        @relation(fields: [ptId], references: [id])
  ptId                  String                    @db.Uuid
  ptSchedule            PtSchedule                @relation(fields: [ptScheduleId], references: [id])
  ptScheduleId          String                    @db.Uuid
  fitnessCeneter        FitnessCenter             @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId       String                    @db.Uuid
  items                 PtRecordItem[]
  memo                  String                    @default("")
  scheduleChangeRequest PtScheduleChangeRequest[]
}

enum RecordType {
  MACHINE
  FREE
  STRETCHING
}

model PtRecordItem {
  id                        String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ptRecord                  PtRecord                   @relation(fields: [ptRecordId], references: [id])
  ptRecordId                String                     @db.Uuid
  entry                     Int
  description               String?
  type                      RecordType
  title                     String?
  machineSetRecords         MachineSetRecord[]
  freeSetRecords            FreeSetRecord[]
  stretchingExerciseRecords StretchingExerciseRecord[]
  photos                    Media[]
  isActive                  Boolean                    @default(true) // 현재 유효한 기록인지 여부
}

model Machine {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  machineSetting  MachineSetting[]
  fitnessCenter   FitnessCenter?   @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId String?          @db.Uuid
  photos          Media[]
}

model MachineSetting {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  machine   Machine               @relation(fields: [machineId], references: [id])
  machineId String                @db.Uuid
  title     String
  unit      String
  values    MachineSettingValue[]
}

model MachineSettingValue {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  machineSetting    MachineSetting     @relation(fields: [machineSettingId], references: [id])
  machineSettingId  String             @db.Uuid
  value             String
  machineSetRecords MachineSetRecord[]
}

model MachineSetRecord {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime              @default(now())
  settingValues  MachineSettingValue[]
  reps           Int
  set            Int // 몇번째 세트인지
  ptRecordItem   PtRecordItem          @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId String                @db.Uuid
}

model Weights {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String // 기구 이름 (예: "덤벨", "올림픽 바벨")
  unit            String          @default("kg")
  weight          Float
  description     String?
  fitnessCenter   FitnessCenter?  @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId String?         @db.Uuid
  freeSetRecord   FreeSetRecord[]
}

model FreeSetRecord {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  weights        Weights[]
  reps           Int // 횟수
  set            Int // 몇번째 세트인지
  ptRecordItem   PtRecordItem @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId String       @db.Uuid
}

model StretchingExercise {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime                   @default(now())
  title                    String
  description              String
  photos                   Media[]
  stretchingExerciseRecord StretchingExerciseRecord[]
}

model StretchingExerciseRecord {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime           @default(now())
  stretchingExercise   StretchingExercise @relation(fields: [stretchingExerciseId], references: [id])
  stretchingExerciseId String             @db.Uuid
  description          String?
  ptRecordItem         PtRecordItem       @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId       String             @db.Uuid
}

model PtSchedule {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  date      DateTime
  startTime Int
  endTime   Int
  ptRecord  PtRecord[]

  @@unique([date, startTime, endTime])
}

enum ScheduleState {
  PENDING
  CONFIRMED
  CANCELED
}

model WeekTime {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weekDay   WeekDay
  startTime Int
  endTime   Int
  pt        Pt?      @relation(fields: [ptId], references: [id])
  ptId      String?  @db.Uuid

  @@unique([weekDay, startTime, endTime])
}

model MembershipProduct {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String       @unique
  price       Int
  description String
  totalCount  Int
  onSale      Boolean      @default(true)
  openedAt    DateTime
  closedAt    DateTime
  membership  Membership[]
}

model Membership {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  startedAt           DateTime?
  closedAt            DateTime?
  member              Member               @relation(fields: [memberId], references: [id])
  memberId            String               @db.Uuid
  paid                Boolean              @default(false)
  membershipPayment   MembershipPayment?
  totalDays           Int
  isActive            Boolean              @default(false)
  membershipProduct   MembershipProduct    @relation(fields: [membershipProductId], references: [id])
  membershipProductId String               @db.Uuid
  membershipCoupon    MembershipCoupon?
  membershipAddedDay  MembershipAddedDay[]
}

model MembershipAddedDay {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime   @default(now())
  issuer       Manager    @relation(fields: [issuerId], references: [id])
  issuerId     String     @db.Uuid
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String     @db.Uuid
  dayCount     Int
  description  String?
}

model MembershipPayment {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  membership   Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  membershipId String?     @unique @db.Uuid
  nictTid      String?
  paidAt       DateTime?
  price        Int
}

enum PaymentType {
  CARD
  CASH
  POINT
}

model PtPayment {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pt        Pt?         @relation(fields: [ptId], references: [id], onDelete: SetNull)
  ptId      String?     @unique @db.Uuid
  type      PaymentType @default(CASH)
  paidAt    DateTime?
  amount    Int
}

model PtCoupon {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issuer    Manager  @relation(fields: [issuerId], references: [id])
  issuerId  String   @db.Uuid
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  trainerId String   @db.Uuid
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String   @db.Uuid
  pt        Pt       @relation(fields: [ptId], references: [id])
  ptId      String   @unique @db.Uuid
  discount  Int      @default(10)
  maxPrice  Int      @default(100000)
  onValid   Boolean  @default(true)
  openedAt  DateTime @default(now())
  closedAt  DateTime @default(dbgenerated("(NOW() + '30 days'::interval)"))
}

model MembershipCoupon {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  issuer       Manager     @relation(fields: [issuerId], references: [id])
  issuerId     String      @db.Uuid
  trainer      Trainer     @relation(fields: [trainerId], references: [id])
  trainerId    String      @db.Uuid
  member       Member      @relation(fields: [memberId], references: [id])
  memberId     String      @db.Uuid
  discount     Int         @default(10)
  maxPrice     Int         @default(100000)
  onValid      Boolean     @default(true)
  openedAt     DateTime    @default(now())
  closedAt     DateTime    @default(dbgenerated("(NOW() + '30 days'::interval)"))
  membership   Membership? @relation(fields: [membershipId], references: [id])
  membershipId String?     @unique @db.Uuid
}

model LogNicePay {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tid        String
  userData   UserData @relation(fields: [userDataId], references: [id])
  userDataId String   @db.Uuid
}

model OffDay {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  date            DateTime
  fitnessCenter   FitnessCenter? @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId String?        @db.Uuid
}

model TrainerOff {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // 반복 OFF (요일 지정)
  weekDay   WeekDay? // enum: MON, TUE, ...
  // 특정 날짜 OFF
  date      DateTime?
  startTime Int
  endTime   Int
  trainer   Trainer   @relation(fields: [trainerId], references: [id])
  trainerId String    @db.Uuid
}

model FitnessCenter {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  address      String
  phone        String
  description  String
  openingHours OpeningHour[]
  trainers     Trainer[]
  members      Member[]
  managers     Manager[]
  machines     Machine[]
  offDays      OffDay[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  weights      Weights[]
  media        Media[]
  ptRecords    PtRecord[]
  inOperation  Boolean       @default(true)
}

model OpeningHour {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fitnessCenter FitnessCenter[]
  dayOfWeek     WeekDay
  openTime      Int
  closeTime     Int
  isClosed      Boolean         @default(false)

  @@unique([dayOfWeek, openTime, closeTime, isClosed]) // isClosed 추가
}

// Session
model RateLimit {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  ip        String
  userId    String?  @db.Uuid // 사용자 ID 추가
  count     Int      @default(1)
  resetAt   DateTime
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([ip, userId]) // IP와 userId의 조합으로 유니크 제약
}

// SUPABASE REALTIME DATABASE
model ChatRoom {
  id            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime              @default(now())
  lastMessageAt DateTime              @default(now())
  messages      Message[]
  participants  ChatRoomParticipant[]
}

model ChatRoomParticipant {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  joinedAt   DateTime @default(now())

  @@unique([chatRoomId, userId])
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

model Message {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime      @default(now())
  room        ChatRoom      @relation(fields: [roomId], references: [id])
  roomId      String        @db.Uuid
  sender      User?         @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderId    String?       @db.Uuid
  content     String
  messageType MessageType   @default(TEXT)
  isRead      Boolean       @default(false) // 추가된 필드
  MessageRead MessageRead[]
}

model MessageRead {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

// 기존 모델을 확장하여 통합된 미디어 관리 시스템 구축

enum PhotoType {
  PROFILE // 프로필 사진
  MACHINE // 장비 사진  
  CENTER // 센터 사진
  EXERCISE // 운동 기록 사진
  STRETCHING // 스트레칭 사진
  PT_RECORD // PT 기록 사진
  BEFORE_AFTER // 전후 비교 사진
  ACHIEVEMENT // 성과 사진
}

enum VideoType {
  EXERCISE_DEMO // 운동 시연
  PT_RECORD // PT 기록
  FORM_CHECK // 폼 체크
  PROGRESS // 진행 과정
  INSTRUCTION // 운동 설명
}

enum MediaStatus {
  UPLOADING
  PROCESSING
  ACTIVE
  SCHEDULED_DELETE
  DELETED
}

// 통합 미디어 모델
model Media {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 파일 정보
  filename     String
  originalName String
  mimeType     String
  size         Int

  // 타입 및 상태
  type      PhotoType? // 이미지인 경우
  videoType VideoType? // 비디오인 경우
  status    MediaStatus @default(UPLOADING)

  // 저장소 정보
  r2Key        String? // R2 저장소 키
  streamId     String? // Cloudflare Stream ID
  publicUrl    String
  thumbnailUrl String?

  // 비디오 전용 필드
  duration   Int? // 초 단위
  resolution String? // "1920x1080"
  embedUrl   String?

  // 자동 삭제 관련
  scheduledDeleteAt DateTime?
  autoDeleteEnabled Boolean   @default(false)

  // 관계
  uploadedBy   User   @relation("UploadedMedia", fields: [uploadedById], references: [id])
  uploadedById String @db.Uuid

  // 연관 엔티티 (옵셔널)
  avatar User? @relation("UserAvatar")

  machineId String?  @db.Uuid
  machine   Machine? @relation(fields: [machineId], references: [id], onDelete: Cascade)

  fitnessCenterId String?        @db.Uuid
  fitnessCenter   FitnessCenter? @relation(fields: [fitnessCenterId], references: [id], onDelete: SetNull)

  ptRecordItemId String?       @db.Uuid
  ptRecordItem   PtRecordItem? @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)

  stretchingExerciseId String?             @db.Uuid
  stretchingExercise   StretchingExercise? @relation(fields: [stretchingExerciseId], references: [id], onDelete: SetNull)

  // 메타데이터 (JSON)
  metadata Json? // 추가 정보를 위한 유연한 필드

  @@index([uploadedById])
  @@index([type])
  @@index([videoType])
  @@index([status])
  @@index([scheduledDeleteAt])
  @@index([machineId])
  @@index([fitnessCenterId])
  @@index([stretchingExerciseId])
}

// 사용자별 미디어 사용량 추적
model MediaUsage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  // 월별 사용량
  month String // "2025-01" 형식

  // 이미지 사용량
  imageCount        Int @default(0)
  imageStorageBytes Int @default(0)

  // 비디오 사용량
  videoCount        Int @default(0)
  videoMinutes      Int @default(0)
  videoStorageBytes Int @default(0)

  // 비용 관련
  estimatedCost Float @default(0)

  @@unique([userId, month])
  @@index([month])
  @@index([userId])
}
