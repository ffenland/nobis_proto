// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MEMBER
  TRAINER
  MANAGER
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model User {
  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  username                 String
  email                    String                    @unique
  naverId                  String?                   @unique
  kakaoId                  String?                   @unique
  mobile                   String                    @unique
  avatarImageId            String?                   @unique @db.Uuid
  avatarImage              Image?                    @relation("UserAvatar", fields: [avatarImageId], references: [id], onDelete: SetNull)
  usernameChangeCount      Int                       @default(0) // 변경 횟수
  lastUsernameChangeAt     DateTime? // 마지막 변경 시간
  role                     UserRole                  @default(MEMBER)
  trainerProfile           Trainer?
  managerProfile           Manager?
  memberProfile            Member?
  userData                 UserData?
  deletedAt                DateTime?
  rateLimit                RateLimit[]
  chatRoomsAsUserOne       ChatRoom[]                @relation("ChatRoomUserOne")
  chatRoomsAsUserTwo       ChatRoom[]                @relation("ChatRoomUserTwo")
  sentMessages             Message[]
  requestedScheduleChanges PtScheduleChangeRequest[] @relation("ScheduleChangeRequestor")
  respondedScheduleChanges PtScheduleChangeRequest[] @relation("ScheduleChangeResponder")

  // 업로드한 모든 미디어 (다대일 관계)
  uploadedVideo Video[]
  uploadedImage Image[]

  // 미디어 사용량
  mediaUsage MediaUsage[]

  // 구독 정보
  isPremiumUser      Boolean       @default(false)
  subscriptionExpiry DateTime?
  messageRead        MessageRead[]
}

model UserData {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId     String       @unique @db.Uuid
  logNicePay LogNicePay[]
}

model Member {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @db.Uuid
  pt               Pt[]
  membership       Membership[]
  ptCoupon         PtCoupon[]
  membershipCoupon MembershipCoupon[]
  fitnessCenter    FitnessCenter?     @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId  String?            @db.Uuid
  active           Boolean            @default(true)
}

model WorkingHour {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer   Trainer[]
  dayOfWeek WeekDay
  openTime  Int
  closeTime Int

  // 이 WorkingHour를 기본값으로 사용하는 FitnessCenter들
  isDefaultFor FitnessCenter[]

  @@unique([dayOfWeek, openTime, closeTime])
}

model Trainer {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique @db.Uuid
  introduce        String             @default("안녕하세요")
  group            Group?             @relation(fields: [groupId], references: [id])
  groupId          String?            @db.Uuid
  pt               Pt[]
  ptProduct        PtProduct[]
  ptCoupon         PtCoupon[]
  membershipCoupon MembershipCoupon[]
  fitnessCenter    FitnessCenter?     @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId  String?            @db.Uuid
  trainerOff       TrainerOff[]
  workingHours     WorkingHour[]
  working          Boolean            @default(true)
}

model Manager {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique @db.Uuid
  group              Group[]
  ptCoupon           PtCoupon[]
  membershipCoupon   MembershipCoupon[]
  membershipAddedDay MembershipAddedDay[]
  fitnessCenter      FitnessCenter?       @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId    String?              @db.Uuid
}

model Group {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  manager   Manager   @relation(fields: [managerId], references: [id])
  managerId String    @db.Uuid
  trainers  Trainer[]
}

model ConfigurationValue {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  title     String
  text      String
  option    String
  etc       String
}

model PtProduct {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  price       Int
  description String
  totalCount  Int
  time        Int       @default(60) // minute
  onSale      Boolean   @default(true)
  trainer     Trainer[]
  openedAt    DateTime  @default(now())
  closedAt    DateTime  @default(dbgenerated("TIMESTAMP '2199-12-31 23:59:59'"))
  pt          Pt[]
}

enum PtState {
  PENDING
  CONFIRMED
  REJECTED
  FINISHED
}

model PtRejectInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  pt        Pt       @relation(fields: [ptId], references: [id])
  ptId      String   @unique @db.Uuid
  reason    String
  schedule  String
}

model Pt {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  ptProduct        PtProduct     @relation(fields: [ptProductId], references: [id])
  ptProductId      String        @db.Uuid
  member           Member?       @relation(fields: [memberId], references: [id])
  memberId         String?       @db.Uuid
  trainer          Trainer?      @relation(fields: [trainerId], references: [id])
  trainerId        String?       @db.Uuid
  state            PtState       @default(PENDING)
  trainerConfirmed Boolean       @default(false)
  description      String        @default("")
  ptRecord         PtRecord[]
  ptCoupon         PtCoupon?
  ptPayment        PtPayment?
  startDate        DateTime
  isRegular        Boolean
  rejectInfo       PtRejectInfo?
}

enum ScheduleChangeState {
  PENDING // 변경 요청 대기
  APPROVED // 승인됨
  REJECTED // 거절됨
  EXPIRED // 만료됨
  CANCELLED // 요청자가 취소
}

model PtScheduleChangeRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // PtRecord와 관계 (핵심!)
  ptRecord   PtRecord @relation(fields: [ptRecordId], references: [id])
  ptRecordId String   @db.Uuid

  // 요청자 정보 (relation name 추가)
  requestor   User   @relation("ScheduleChangeRequestor", fields: [requestorId], references: [id])
  requestorId String @db.Uuid

  // 요청된 새로운 일정 정보
  requestedDate      DateTime
  requestedStartTime Int
  requestedEndTime   Int
  // 원래의 일정
  originalDate       DateTime
  originalStartTime  Int
  originalEndTime    Int

  // 상태 및 메타데이터
  state  ScheduleChangeState @default(PENDING)
  reason String // 변경 사유

  // 응답 정보 (relation name 추가)
  responder       User?     @relation("ScheduleChangeResponder", fields: [responderId], references: [id])
  responderId     String?   @db.Uuid
  responseMessage String? // 승인/거절 사유
  respondedAt     DateTime?

  // 만료 시간
  expiresAt DateTime

  @@index([ptRecordId])
  @@index([state])
  @@index([expiresAt])
}

model PtRecord {
  id                    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  pt                    Pt                        @relation(fields: [ptId], references: [id])
  ptId                  String                    @db.Uuid
  ptSchedule            PtSchedule                @relation(fields: [ptScheduleId], references: [id])
  ptScheduleId          String                    @db.Uuid
  fitnessCenter         FitnessCenter             @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId       String                    @db.Uuid
  items                 PtRecordItem[]
  memo                  String                    @default("")
  scheduleChangeRequest PtScheduleChangeRequest[]
}

enum RecordType {
  MACHINE
  FREE
  STRETCHING
}

model PtRecordItem {
  id                        String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                 DateTime                   @default(now())
  ptRecord                  PtRecord                   @relation(fields: [ptRecordId], references: [id])
  ptRecordId                String                     @db.Uuid
  entry                     Int
  description               String?
  type                      RecordType
  title                     String?
  machineSetRecords         MachineSetRecord[]
  freeSetRecords            FreeSetRecord[]
  stretchingExerciseRecords StretchingExerciseRecord[]
  images                    Image[]
  isActive                  Boolean                    @default(true) // 현재 유효한 기록인지 여부
  videos                    Video[]
}

model Machine {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  machineSetting  MachineSetting[]
  fitnessCenter   FitnessCenter?   @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId String?          @db.Uuid
  images          Image[]
}

model MachineSetting {
  id        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  machine   Machine               @relation(fields: [machineId], references: [id])
  machineId String                @db.Uuid
  title     String
  unit      String
  values    MachineSettingValue[]
}

model MachineSettingValue {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  machineSetting    MachineSetting     @relation(fields: [machineSettingId], references: [id])
  machineSettingId  String             @db.Uuid
  value             String
  machineSetRecords MachineSetRecord[]
}

model MachineSetRecord {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime              @default(now())
  settingValues  MachineSettingValue[]
  reps           Int
  set            Int // 몇번째 세트인지
  ptRecordItem   PtRecordItem          @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId String                @db.Uuid
}

// 운동기구 카테고리 enum
enum EquipmentCategory {
  WEIGHT // 웨이트 (덤벨, 바벨, 원판)
  CARDIO // 유산소 도구 (줄넘기, 스텝박스)
  RESISTANCE // 저항 도구 (고무밴드, 저항밴드)
  FUNCTIONAL // 기능성 도구 (폼롤러, 밸런스볼)
  ACCESSORY // 액세서리 (벨트, 스트랩)
  MOBILITY // 가동성 도구 (요가매트, 스트레칭 도구)
  CORE // 코어 도구 (메디신볼, 슬라이딩 디스크)
  SPECIALTY // 특수 도구 (케틀벨, 샌드백)
}

// 운동기구 통합 모델
model Equipment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 기본 정보
  title    String // 기구 이름 (예: "덤벨 5kg", "고무밴드 옐로우")
  category EquipmentCategory // 카테고리

  // 수치 정보 (유연한 구조)
  primaryValue   Float? // 주요 값 (무게, 탄성도, 저항력 등)
  primaryUnit    String? // 주요 단위 (kg, lbs, level, resistance 등)
  secondaryValue Float? // 부차 값 (길이, 지름 등)
  secondaryUnit  String? // 부차 단위 (cm, inch 등)

  // 부가 정보
  brand       String? // 브랜드
  model       String? // 모델명
  description String? // 설명

  // 관리 정보
  quantity Int     @default(1) // 수량
  location String? // 보관 위치

  // 관계
  fitnessCenter   FitnessCenter? @relation(fields: [fitnessCenterId], references: [id], onDelete: SetNull)
  fitnessCenterId String?        @db.Uuid

  // 운동 기록 연결
  freeSetRecords           FreeSetRecord[]
  stretchingExerciseRecord StretchingExerciseRecord[]

  // 미디어 (사진)
  images Image[]

  @@index([fitnessCenterId, category])
}

model FreeExercise {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime        @default(now())
  title          String
  description    String?
  images         Image[]
  freeSetRecords FreeSetRecord[]
}

model FreeSetRecord {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  freeExercise   FreeExercise @relation(fields: [freeExerciseId], references: [id])
  freeExerciseId String       @db.Uuid
  equipments     Equipment[]
  reps           Int // 횟수
  set            Int // 몇번째 세트인지
  ptRecordItem   PtRecordItem @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId String       @db.Uuid
}

model StretchingExercise {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                DateTime                   @default(now())
  title                    String
  description              String
  images                   Image[]
  stretchingExerciseRecord StretchingExerciseRecord[]
}

model StretchingExerciseRecord {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime           @default(now())
  stretchingExercise   StretchingExercise @relation(fields: [stretchingExerciseId], references: [id])
  stretchingExerciseId String             @db.Uuid
  equipments           Equipment[]
  description          String?
  ptRecordItem         PtRecordItem       @relation(fields: [ptRecordItemId], references: [id], onDelete: Cascade)
  ptRecordItemId       String             @db.Uuid
}

model PtSchedule {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  date      DateTime
  startTime Int
  endTime   Int
  ptRecord  PtRecord[]

  @@unique([date, startTime, endTime])
}

enum ScheduleState {
  PENDING
  CONFIRMED
  CANCELED
}

model MembershipProduct {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String       @unique
  price       Int
  description String
  totalCount  Int
  onSale      Boolean      @default(true)
  openedAt    DateTime
  closedAt    DateTime
  membership  Membership[]
}

model Membership {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  startedAt           DateTime?
  closedAt            DateTime?
  member              Member               @relation(fields: [memberId], references: [id])
  memberId            String               @db.Uuid
  paid                Boolean              @default(false)
  membershipPayment   MembershipPayment?
  totalDays           Int
  isActive            Boolean              @default(false)
  membershipProduct   MembershipProduct    @relation(fields: [membershipProductId], references: [id])
  membershipProductId String               @db.Uuid
  membershipCoupon    MembershipCoupon?
  membershipAddedDay  MembershipAddedDay[]
}

model MembershipAddedDay {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime   @default(now())
  issuer       Manager    @relation(fields: [issuerId], references: [id])
  issuerId     String     @db.Uuid
  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId String     @db.Uuid
  dayCount     Int
  description  String?
}

model MembershipPayment {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  membership   Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  membershipId String?     @unique @db.Uuid
  nictTid      String?
  paidAt       DateTime?
  price        Int
}

enum PaymentType {
  CARD
  CASH
  POINT
}

model PtPayment {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pt        Pt?         @relation(fields: [ptId], references: [id], onDelete: SetNull)
  ptId      String?     @unique @db.Uuid
  type      PaymentType @default(CASH)
  paidAt    DateTime?
  amount    Int
}

model PtCoupon {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issuer    Manager  @relation(fields: [issuerId], references: [id])
  issuerId  String   @db.Uuid
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  trainerId String   @db.Uuid
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String   @db.Uuid
  pt        Pt       @relation(fields: [ptId], references: [id])
  ptId      String   @unique @db.Uuid
  discount  Int      @default(10)
  maxPrice  Int      @default(100000)
  onValid   Boolean  @default(true)
  openedAt  DateTime @default(now())
  closedAt  DateTime @default(dbgenerated("(NOW() + '30 days'::interval)"))
}

model MembershipCoupon {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  issuer       Manager     @relation(fields: [issuerId], references: [id])
  issuerId     String      @db.Uuid
  trainer      Trainer     @relation(fields: [trainerId], references: [id])
  trainerId    String      @db.Uuid
  member       Member      @relation(fields: [memberId], references: [id])
  memberId     String      @db.Uuid
  discount     Int         @default(10)
  maxPrice     Int         @default(100000)
  onValid      Boolean     @default(true)
  openedAt     DateTime    @default(now())
  closedAt     DateTime    @default(dbgenerated("(NOW() + '30 days'::interval)"))
  membership   Membership? @relation(fields: [membershipId], references: [id])
  membershipId String?     @unique @db.Uuid
}

model LogNicePay {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tid        String
  userData   UserData @relation(fields: [userDataId], references: [id])
  userDataId String   @db.Uuid
}

model OffDay {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  date            DateTime
  fitnessCenter   FitnessCenter? @relation(fields: [fitnessCenterId], references: [id])
  fitnessCenterId String?        @db.Uuid
}

model TrainerOff {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 특정 날짜 OFF만 처리 (weekDay 제거됨)
  date      DateTime // 필수 필드로 변경
  startTime Int
  endTime   Int
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  trainerId String   @db.Uuid
}

model FitnessCenter {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  address             String
  phone               String
  description         String
  openingHours        OpeningHour[]
  defaultWorkingHours WorkingHour[]
  trainers            Trainer[]
  members             Member[]
  managers            Manager[]
  machines            Machine[]
  offDays             OffDay[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  equipments          Equipment[]
  images              Image[]
  ptRecords           PtRecord[]
  inOperation         Boolean       @default(true)
}

model OpeningHour {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fitnessCenter FitnessCenter[]
  dayOfWeek     WeekDay
  openTime      Int
  closeTime     Int
  isClosed      Boolean         @default(false)

  @@unique([dayOfWeek, openTime, closeTime, isClosed]) // isClosed 추가
}

// Session
model RateLimit {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  ip        String
  userId    String?  @db.Uuid // 사용자 ID 추가
  count     Int      @default(1)
  resetAt   DateTime
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([ip, userId]) // IP와 userId의 조합으로 유니크 제약
}

// SUPABASE REALTIME DATABASE
model ChatRoom {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  // 1:1 채팅방 참여자 직접 관리
  userOne   User   @relation("ChatRoomUserOne", fields: [userOneId], references: [id])
  userOneId String @db.Uuid
  userTwo   User   @relation("ChatRoomUserTwo", fields: [userTwoId], references: [id])
  userTwoId String @db.Uuid

  messages Message[]

  // 핵심: 두 유저 조합의 유니크 제약
  @@unique([userOneId, userTwoId], name: "unique_chat_participants")
  @@index([userOneId])
  @@index([userTwoId])
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

model Message {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime      @default(now())
  room        ChatRoom      @relation(fields: [roomId], references: [id])
  roomId      String        @db.Uuid
  sender      User?         @relation(fields: [senderId], references: [id], onDelete: SetNull)
  senderId    String?       @db.Uuid
  content     String
  messageType MessageType   @default(TEXT)
  isRead      Boolean       @default(false) // 추가된 필드
  messageRead MessageRead[]
}

model MessageRead {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

// 기존 모델을 확장하여 통합된 미디어 관리 시스템 구축

model Image {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())

  // Cloudflare Images ID (custom ID)                                  
  cloudflareId String @unique

  // 파일 정보                                                         
  originalName String
  mimeType     String
  size         Int

  // 이미지 타입                                                       
  type ImageType

  // 상태                                                              
  status ImageStatus @default(ACTIVE)

  // 핵심 관계: 누가 업로드했는지 (필수)
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String @db.Uuid

  // 아바타로 사용되는 경우 (User 모델의 avatarMedia와 연결)
  avatarUser User? @relation("UserAvatar")

  // 다양한 엔티티와의 선택적 관계들
  machine   Machine? @relation(fields: [machineId], references: [id], onDelete: SetNull)
  machineId String?  @db.Uuid

  fitnessCenter   FitnessCenter? @relation(fields: [fitnessCenterId], references: [id], onDelete: SetNull)
  fitnessCenterId String?        @db.Uuid

  ptRecordItem   PtRecordItem? @relation(fields: [ptRecordItemId], references: [id], onDelete: SetNull)
  ptRecordItemId String?       @db.Uuid

  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  equipmentId String?    @db.Uuid

  freeExercise   FreeExercise? @relation(fields: [freeExerciseId], references: [id])
  freeExerciseId String?       @db.Uuid

  stretchingExercise   StretchingExercise? @relation(fields: [stretchingExerciseId], references: [id])
  stretchingExerciseId String?             @db.Uuid

  // 메타데이터                                                           
  metadata Json?

  // 불필요한 user 관계 제거됨!

  @@index([uploadedById])
  @@index([type])
  @@index([status])
  @@index([cloudflareId])
}

enum ImageType {
  PROFILE
  MACHINE
  CENTER
  EXERCISE
  STRETCHING
  PT_RECORD
  BEFORE_AFTER
  ACHIEVEMENT
}

enum ImageStatus {
  ACTIVE
  DELETED
}

model Video {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cloudflare Stream ID                                                 
  streamId String @unique

  // 파일 정보                                                            
  originalName String
  mimeType     String
  size         Int

  // 비디오 정보                                                          
  duration   Int // 초 단위                                           
  resolution String? // "1920x1080"                                       

  // 비디오 타입                                                          
  type VideoType

  // 상태                                                                 
  status VideoStatus @default(PROCESSING)

  // 관계                                                                 
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String @db.Uuid

  // 선택적 관계                                                          
  ptRecordItem   PtRecordItem? @relation(fields: [ptRecordItemId], references: [id], onDelete: SetNull)
  ptRecordItemId String?       @db.Uuid

  // 메타데이터                                                           
  metadata Json?

  @@index([uploadedById])
  @@index([type])
  @@index([status])
  @@index([streamId])
}

enum VideoType {
  EXERCISE_DEMO
  PT_RECORD
  FORM_CHECK
  PROGRESS
  INSTRUCTION
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  READY
  DELETED
}

// 사용자별 미디어 사용량 추적
model MediaUsage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  // 월별 사용량
  month String // "2025-01" 형식

  // 이미지 사용량
  imageCount        Int @default(0)
  imageStorageBytes Int @default(0)

  // 비디오 사용량
  videoCount        Int @default(0)
  videoMinutes      Int @default(0)
  videoStorageBytes Int @default(0)

  // 비용 관련
  estimatedCost Float @default(0)

  @@unique([userId, month])
  @@index([month])
  @@index([userId])
}
